// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for User Roles
enum Role {
  USER
  ADMIN
}

// User Model
model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  password     String
  name         String?
  role         Role      @default(USER)
  blogs        Blog[] // One-to-Many relationship with Blog as an author
  likes        Like[] // Many-to-Many relationship with Blog for likes via join table
  comments     Comment[] // One-to-Many relationship with Comment
  otp          String?
  refreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Blog Model
model Blog {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  author     User      @relation(fields: [authorId], references: [id]) // One-to-Many relationship with User
  authorId   String    @db.ObjectId
  likes      Like[] // Many-to-Many relationship with User for likes via join table
  comments   Comment[] // One-to-Many relationship with Comment
  likesCount Int       @default(0) // Manually managed count

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Like Model for Many-to-Many relationship between User and Blog
model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String @db.ObjectId

  @@unique([userId, blogId]) // Ensures a user can like a blog only once
}

// Comment Model
model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  blog     Blog   @relation(fields: [blogId], references: [id])
  blogId   String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
