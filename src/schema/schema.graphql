# Enum for User Roles
enum Role {
  USER
  ADMIN
}

# User Type
type User {
  id: ID!
  email: String!
  name: String
  role: Role!
  blogs: [Blog] # Blogs authored by the user
  likes: [Like]
  comments: [Comment]
  createdAt: String!
  updatedAt: String!
  opt: String
}

# Blog Type
type Blog {
  id: ID!
  title: String!
  content: String!
  author: User! # Single author
  authorId: ID! 
  likes: [Like]!
  comments: [Comment]!
  likesCount: Int!
  createdAt: String!
  updatedAt: String!
}

# Like Type
type Like {
  id: ID!
  user: User!
  blog: Blog!
}

# Comment Type
type Comment {
  id: ID!
  content: String!
  authorId: ID!
  author: User!
  blogId: ID!
  blog: Blog!
  createdAt: String!
  updatedAt: String!
}

type loginOutput{
  access_token: String!
  refresh_token: String!
}

# Input Types for Creating and Updating Users, Blogs, and Comments
input CreateUserInput {
  email: String!
  password: String!
  name: String
  role: Role
}

input UpdateUserInput {
  email: String
  name: String
}

input ChangePasswordInput {
  id: ID!
  currentPassword: String!
  newPassword: String!
}

input CreateBlogInput {
  title: String!
  content: String!
  # authorId: ID! # Single author ID
  # We will get the author id from the Response.user after the authentication
}

input UpdateBlogInput {
  title: String
  content: String
}

input CreateCommentInput {
  content: String!
  # authorId: ID!
  # We will get the author id from the Response.user after the authentication
  # blogId: ID! # Single blog ID
  blogId: ID!
}

input UpdateCommentInput {
  content: String
}

# Input Types for Authentication
input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  email: String!
  password: String!
  name: String
  role: Role
}

input UserIdentifierInput {
  id: ID
  email: String
}



# Queries
type Query {
  # User Queries
  users: [User!]!
  user(userInput: UserIdentifierInput!): User
  logout: String

  # Blog Queries
  blogs: [Blog!]!
  blog(id: ID!): Blog

  # Comment Queries
  comments(id: ID!): [Comment!]!
  comment(id: ID!): Comment
}

# Interface for Response
interface response {
  message: String!
  success: Boolean!
  status: Int
}

# User Response Type implementing Response Interface
type userResponse implements response {
  data: User
  message: String!
  success: Boolean!
  status: Int
}

# Mutations
type Mutation {
  # Authentication
  register(input: RegisterInput!): userResponse!
  login(input: LoginInput!): loginOutput! # Returns JWT token
  # User Mutations
  updateUser(id: ID!, input: UpdateUserInput!): userResponse!
  deleteUser(id: ID!): Boolean!
  otp(email: String): String
  changePassword(input: ChangePasswordInput!): String!

  # Blog Mutations
  createBlog(input: CreateBlogInput!): Blog!
  updateBlog(id: ID!, input: UpdateBlogInput!): Blog!
  deleteBlog(id: ID!): Boolean!

  # Comment Mutations
  createComment(input: CreateCommentInput!): Comment!
  updateComment(id: ID!, input: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Boolean!

  # Like Mutations
  likeBlog(blogId: ID!): Like!
  # Three Activities involved in one one like action 
  unlikeBlog(blogId: ID!): Boolean!
}
